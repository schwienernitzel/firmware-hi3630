import /init.recovery.${ro.hardware}.rc
import init.recovery.huawei.rc

import /init.chip.usb.rc
on early-init
    start ueventd
    start healthd

on init
    export PATH /sbin:/system/bin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on fs
#    mkdir /dev/usb-ffs 0770 shell shell
#    mkdir /dev/usb-ffs/adb 0770 shell shell
#    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000


    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_all_props_action
    load_all_props

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service healthd /sbin/healthd -r
    critical
    seclabel u:r:healthd:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

# Always start adbd on userdebug and eng builds
service hdbd /sbin/hdbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket hdbd stream 660 system system
    seclabel u:r:hdbd:s0
# secure os tee agent
service teecd /sbin/teecd
    disabled
    user root
    group root
    seclabel u:r:tee:s0

on property:ro.board.platform=hi3635
    start teecd
# Used to disable USB when switching states
on property:sys.usb.config=none
    stop adbd
    stop hdbd
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/bDeviceClass 0
    write /sys/devices/virtual/android_usb/android0/port_mode 1
    setprop sys.usb.state ${sys.usb.config}

# init process will set usb mode depend on debug/MMI test/usb update/ship
on property:sys.usb.config=manufacture,adb
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct 105c
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    write /sys/class/android_usb/f_mass_storage/luns sdcard
    write /sys/class/android_usb/f_mass_storage/lun/file none
    write /sys/class/android_usb/android0/f_hw_acm/hw_instances 3
    write /sys/class/android_usb/android0/functions hw_acm,mass_storage,adb,hdb
    write /sys/devices/virtual/android_usb/android0/port_mode 14
    write /sys/class/android_usb/android0/enable 1
    start adbd
    start hdbd
    setprop sys.usb.state ${sys.usb.config}

on property:sys.usb.config=mass_storage
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct 1037
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    write /sys/class/android_usb/f_mass_storage/luns sdcard
    write /sys/class/android_usb/f_mass_storage/lun/file none
    write /sys/class/android_usb/android0/functions ${sys.usb.config}
    write /sys/devices/virtual/android_usb/android0/port_mode 7
    write /sys/class/android_usb/android0/enable 1
    setprop sys.usb.state ${sys.usb.config}

# Always start adbd and hdbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd
    start hdbd

# Restart adbd and hdbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    restart hdbd
    write /sys/class/android_usb/android0/enable 1

# /* to process the usb port switch uevent */
service hw_ueventd /sbin/hw_ueventd
    seclabel u:r:hw_ueventd:s0

